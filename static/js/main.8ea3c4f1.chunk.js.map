{"version":3,"sources":["data/routing.js","reducer/mainReducer.js","reducer/index.js","store/index.js","components/generalComponents/Header.js","components/generalComponents/Layout.js","components/contactComponets/index.js","components/mainPageComponents/index.js","App.js","registerServiceWorker.js","index.js"],"names":["RoutingEnum","Base","Main","Contacts","Object","freeze","Routing","initialState","mainReducer","handleActions","rootReducer","combineReducers","main","store","middleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","createStore","configureStore","mainInitialState","Header","className","to","React","PureComponent","Layout","this","props","children","Button","style","margin","height","App","exact","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","rootElement","document","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gPAAMA,EAAc,CAAEC,KAAM,IAAKC,KAAM,QAASC,SAAU,aAC1DC,OAAOC,OAAOL,GACP,IAAMM,EAAUN,E,wBCAVO,EAAe,GAEfC,EAAcC,YACzB,GACAF,GCFWG,EAAcC,YAAgB,CACzCC,KAAMJ,ICQR,IAEeK,EAVf,SAAwBN,GACtB,IAEIO,GAFwC,qBAAXC,QAA0BA,OAAOC,sCAAyCC,KAEzEC,YAAgBC,MAElD,OADcC,YAAYV,EAAaH,EAAcO,GAIzCO,CDLc,CAC1BT,KAAMU,IELaC,G,6KAEjB,OACE,0BAASC,UAAU,cAAnB,UACE,qBAAKA,UAAU,oBAAf,SACE,qBAAKA,UAAU,oBAAf,SACA,cAAC,IAAD,CAAMC,GAAInB,EAAQJ,KAAlB,sBAGF,sBAAKsB,UAAU,4BAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,6BAAf,SACE,oBAAIA,UAAU,qBAAd,SACE,cAAC,IAAD,CAAMC,GAAInB,EAAQH,SAAlB,4BAIN,qBAAKqB,UAAU,wBAAf,gC,GAjB0BE,IAAMC,gBCDrBC,E,uKAEjB,OACE,qBAAKJ,UAAU,mBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,UAAf,SAA0BK,KAAKC,MAAMC,oB,GANXJ,iBCDfxB,E,uKAEjB,OAAO,4B,GAF2BuB,IAAMC,e,QCCvBzB,E,uKAEjB,OACE,0CAEE,cAAC8B,EAAA,EAAD,CAAQC,MAAO,CAAEC,OAAQ,OAAzB,wBACA,qBAAKD,MAAO,CAAEE,OAAQ,e,GANIT,IAAMC,eCWnBS,E,uKAEjB,OACE,cAAC,IAAD,CAAUvB,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,EAAD,WACE,cAAC,IAAD,CACEwB,OAAK,EACLC,KAAM,CAAChC,EAAQL,KAAMK,EAAQJ,MAC7BqC,UAAWrC,IAEb,cAAC,IAAD,CAAOmC,OAAK,EAACC,KAAMhC,EAAQH,SAAUoC,UAAWpC,e,GAX3BwB,iBCJ3Ba,EAAcC,QACW,cAA7B1B,OAAO2B,SAASC,UAEa,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DA6BJ,SAASC,EAAiBC,GACxBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjE,IAAMC,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OACP,cAAC,IAAD,CAAYC,SAAU,IAAtB,SACE,cAAC,EAAD,MAEFL,GDQa,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwBtD,OAAO2B,UAC3C4B,SAAWvD,OAAO2B,SAAS4B,OAIvC,OAGFvD,OAAOwD,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMuB,aAAN,sBAEP7B,EAwCV,SAAkCM,GAEhC0B,MAAM1B,GACHI,MAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BnC,OAAO2B,SAASsC,eAKpBnC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEA5DAsB,CAAwBnC,GAGxBD,EAAgBC,OC1BxBoC,K","file":"static/js/main.8ea3c4f1.chunk.js","sourcesContent":["const RoutingEnum = { Base: '/', Main: \"/main\", Contacts: \"/contacts\" };\nObject.freeze(RoutingEnum);\nexport const Routing = RoutingEnum;\n","import { handleActions } from \"redux-actions\";\n\nexport const initialState = {};\n\nexport const mainReducer = handleActions(\n  {},\n  initialState\n);","import { combineReducers } from \"redux\";\n\nimport { initialState as mainInitialState, mainReducer } from \"./mainReducer\";\n\nexport const rootReducer = combineReducers({\n  main: mainReducer,\n});\n\nexport const initialState = {\n  main: mainInitialState,\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { initialState, rootReducer } from '../reducer';\n\nfunction configureStore(initialState) {\n  const composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n  let middleware = composeEnhancers(applyMiddleware(thunk));\n  const store = createStore(rootReducer, initialState, middleware);\n  return store;\n}\n\nconst store = configureStore(initialState);\n\nexport default store;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Routing } from \"../../data/routing\";\r\n\r\nexport default class Header extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <section className=\"main-header\">\r\n        <div className=\"main-header__left\">\r\n          <div className=\"main-header__logo\">\r\n          <Link to={Routing.Main}>Logo</Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-header__right d-flex\">\r\n          <div className=\"main-header__contacts\">\r\n            <div className=\"main-header__contacts_main\">\r\n              <h3 className=\"ui no-anchor no-bg\">\r\n                <Link to={Routing.Contacts}>Contacts</Link>\r\n              </h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"main-header__language\">language</div>\r\n        </div>\r\n        {/* <div className=\"main-header__separator\"></div> */}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\nimport Header from \"./Header\";\n\nexport default class Layout extends PureComponent {\n  render() {\n    return (\n      <div className=\"layout-container\">\n        <div className=\"layout-container__data\">\n          <Header />\n          <div className=\"content\">{this.props.children}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class Contacts extends React.PureComponent {\n  render() {\n    return <div></div>;\n  }\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nexport default class Main extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        Content\n        <Button style={{ margin: \"2em\" }}>Click Here</Button>\n        <div style={{ height: 1250 }}></div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router\";\nimport { Provider } from \"react-redux\";\n\nimport { Routing } from \"./data/routing\";\n\nimport store from \"./store\";\n\nimport \"./style/index.scss\";\n\nimport Layout from \"./components/generalComponents/Layout\";\nimport Contacts from \"./components/contactComponets\";\nimport Main from \"./components/mainPageComponents\";\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <Provider store={store}>\n        <Switch>\n          <Layout>\n            <Route\n              exact\n              path={[Routing.Base, Routing.Main]}\n              component={Main}\n            />\n            <Route exact path={Routing.Contacts} component={Contacts} />\n          </Layout>\n        </Switch>\n      </Provider>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <HashRouter basename={'/'}>\n    <App />\n  </HashRouter>,\n  rootElement);\nregisterServiceWorker();\n\n"],"sourceRoot":""}